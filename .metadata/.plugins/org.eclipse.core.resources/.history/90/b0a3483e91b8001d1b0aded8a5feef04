package projects.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalTime;

import projects.entities.Project;
import projects.exceptions.DdbExceptions;
import providedd.util.DaoBase;

public class ProjectDao extends DaoBase {

	private static final String CATEGORY_TABLE= "category";
	private static final String MATERIAL_TABLE= "material";
	private static final String PROJECT_TABLE= "project";
	private static final String PROJECT_CATEGORY_TABLE= "project_category";
	private static final String STEP_TABLE= "step";
	
	public Project insertProject(Project project) {
		
		//@formatter:off

		String sql= ""
		+ "INSERT INTO " + PROJECT_TABLE + " "
		+ "(project_name, estimated_hours, actual_hours, difficulty, notes) "
		+ "VALUES "
		+ "(?, ?, ?, ?, ?)";
		//@formatter:on
		
		try(Connection conn = DdbConnection.getConnection()){
			startTransaction(conn);
			try(PreparedStatement stmt= conn.prepareStatement(sql)){
				
				setParameter(stmt,1, project.getProjectName(),String.class);
				setParameter(stmt, 2, project.getEstimatedHours(),BigDecimal.class);
				setParameter(stmt, 3, project.getActualHours(),  BigDecimal.class);
				setParameter(stmt, 4, project.getDifficulty(), Integer.class);
				setParameter(stmt, 5, project.getNotes(), String.class);
				
				stmt.executeUpdate();
				Integer projectId= getLastInsertId(conn,PROJECT_TABLE);
				commitTransaction(conn);
				project.setProjectId(projectId);
				return project;
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DdbExceptions(e); 
			}
			
		}
		catch(SQLException e) {
			throw new DdbExceptions(e);
		}
		
	}

	public void fetchAllProjects() {
		//@formatter:off

		String sql= " SELECT * FROM "+ PROJECT_TABLE  + "ORDER BY  project_name ";  
		
		//@formatter:on
		
		
		try(Connection conn= DdbConnection.getConnection()){
			startTransaction(conn);
			try(PreparedStatement stmt= conn.prepareStatement(sql)){
				
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DdbExceptions(e);
			}
			
		} catch (SQLException e) {
			throw new DdbExceptions(e);
		}		
	}

	
}
