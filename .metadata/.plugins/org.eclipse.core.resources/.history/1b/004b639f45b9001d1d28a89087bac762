package projects.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalTime;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import projects.entities.Category;
import projects.entities.Material;
import projects.entities.Project;
import projects.entities.Step;
import projects.exceptions.DdbExceptions;
import providedd.util.DaoBase;

public class ProjectDao extends DaoBase {

	private static final String CATEGORY_TABLE= "catagory";
	private static final String MATERIAL_TABLE= "material";
	private static final String PROJECT_TABLE= "project";
	private static final String PROJECT_CATEGORY_TABLE= "project_category";
	private static final String STEP_TABLE= "step";
	
	public Project insertProject(Project project) {
		
		//@formatter:off

		String sql= ""
		+ "INSERT INTO " + PROJECT_TABLE + " "
		+ "(project_name, estimated_hours, actual_hours, difficulty, notes) "
		+ "VALUES "
		+ "(?, ?, ?, ?, ?)";
		//@formatter:on
		
		try(Connection conn = DdbConnection.getConnection()){
			startTransaction(conn);
			try(PreparedStatement stmt= conn.prepareStatement(sql)){
				
				setParameter(stmt,1, project.getProjectName(),String.class);
				setParameter(stmt, 2, project.getEstimatedHours(),BigDecimal.class);
				setParameter(stmt, 3, project.getActualHours(),  BigDecimal.class);
				setParameter(stmt, 4, project.getDifficulty(), Integer.class);
				setParameter(stmt, 5, project.getNotes(), String.class);
				
				stmt.executeUpdate();
				Integer projectId= getLastInsertId(conn,PROJECT_TABLE);
				commitTransaction(conn);
				project.setProjectId(projectId);
				return project;
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DdbExceptions(e); 
			}
			
		}
		catch(SQLException e) {
			throw new DdbExceptions(e);
		}
		
	}

	public List<Project> fetchAllProjects() {
		//@formatter:off

		String sql= " SELECT * FROM "+ PROJECT_TABLE  + " ORDER BY  project_name ";  
		
		//@formatter:on
		
		
		try(Connection conn= DdbConnection.getConnection()){
			startTransaction(conn);
			
			try(PreparedStatement stmt= conn.prepareStatement(sql)){
				try(ResultSet rs= stmt.executeQuery()){
					List <Project> projects = new LinkedList<>();
					while(rs.next()) {
					
					projects.add(extract(rs,Project.class));
				}
				return projects;
			}
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DdbExceptions(e);
			
		}
		} 
	     catch(SQLException e) {
			throw new DdbExceptions(e);
			
	}

	
	}

	public Optional<Project> fetchProjectById(Integer projectId){
		
	
		String sql= "SELECT * FROM "+ PROJECT_TABLE + " WHERE project_id = ? ";
		try (Connection conn= DdbConnection.getConnection()){
			startTransaction(conn);
			try {
			Project project= null;
			try(PreparedStatement stmt= conn.prepareStatement(sql)){
				setParameter(stmt,1,projectId, Integer.class);
				try(ResultSet rs= stmt.executeQuery()){
					if(rs.next()) {
						project= extract(rs,Project.class);
					}
				}
			}
			
			if(Objects.nonNull(project)) {
				
				project.getMaterials().addAll(fetchMaterialsForProject(conn,projectId));
				project.getSteps().addAll(fetchStepsForProject(conn,projectId));
				project.getCategories().addAll(fetchCategoriesForProject(conn,projectId));
			}
			commitTransaction(conn);
			return Optional.ofNullable(project);
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DdbExceptions(e);
			}
          
		}
		catch(SQLException e) {
			
			throw new DdbExceptions(e);
		}
		
}

	private List<Material> fetchMaterialsForProject(Connection conn, Integer projectId) throws SQLException{
String sql= "SELECT * FROM " + MATERIAL_TABLE + "  WHERE  project_id = ? ";
		
		try(PreparedStatement stmt= conn.prepareStatement(sql)){
			setParameter(stmt,1,projectId, Integer.class);
			
			try(ResultSet rs= stmt.executeQuery()){
			List<Material>materials= new LinkedList<>();
			
			while(rs.next()) {
				materials.add(extract(rs,Material.class));
			}
			return materials;
			}
		}
	}

	private List <Step> fetchStepsForProject(Connection conn, Integer projectId) throws SQLException {
		String sql= "SELECT * FROM " + STEP_TABLE + "  WHERE project_id = ? ";
		
		try(PreparedStatement stmt= conn.prepareStatement(sql)){
			setParameter(stmt,1,projectId,Integer.class);
			
			try(ResultSet rs= stmt.executeQuery()){
			List<Step>steps= new LinkedList<>();
			
			while(rs.next()) {
				steps.add(extract(rs,Step.class));
			}
			return steps;
			}
		}
		
	}

	private List <Category> fetchCategoriesForProject(Connection conn, Integer projectId) throws SQLException
	{
		
		//@formatter:off
				String sql= ""
						+ "SELECT c. * "
						+ "FROM "+  CATEGORY_TABLE + " c "
						+ "JOIN " + PROJECT_CATEGORY_TABLE + " Pc USING ( category_id) "
						+  " WHERE project_id= ? ";
							//@formatter:on
					
				try(PreparedStatement stmt= conn.prepareStatement(sql))  {
					setParameter(stmt,1,projectId,Integer.class);
					
					try(ResultSet rs= stmt.executeQuery()){
						List<Category> categories= new LinkedList<>();
						
						while(rs.next()) {
							categories.add(extract(rs,Category.class));
						}
						return categories;
					}
					
				}
	}
	
}


/////////////////////


/*
package recipies.dao;




public class RecipiesDao extends DaoBase {
	private static final String CATEGORY_TABLE= "category";
	private static final String INGREDIENT_TABLE="ingredient";
	private static final String RECIPE_TABLE= "recipe";
	private static final String RECIPE_CATEGORY_TABLE= "recipe_category";
	private static final String STEP_TABLE= "step";
	private static final String UNIT_TABLE= "unit";
	
	public Optional<Project> fetchProjectById(Integer projectId){
		String sql= "SELECT * FROM "+ PROJECT_TABLE + " WHERE project_id = ? ";
		try (Connection conn= DdbConnection.getConnection()){
			startTransaction(conn);
			try {
			Project project= null;
			try(PreparedStatement stmt= conn.prepareStatement(sql)){
				setParameter(stmt,1,projectId, Integer.class);
				try(ResultSet rs= stmt.executeQuery()){
					if(rs.next()) {
						project= extract(rs,Project.class);
					}
				}
			}
			
			if(Objects.nonNull(project)) {
				
				project.getMaterials().addAll(fetchMaterialsForProject(conn,projectId));
				project.getSteps().addAll(fetchStepsForProject(conn,projectId));
				project.getCategories().addAll(fetchCategoriesForProject(conn,projectId));
			}
			commitTransaction(conn);
			return Optional.ofNullable(project);
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DdbExceptions(e);
			}
          
		}
		catch(SQLException e) {
			
			throw new DdbExceptions(e);
		}
		
	}
	
	private List<Category> fetchCatagoriesForProject(Connection conn, Integer recipeId) throws SQLException {
		//@formatter:off
		String sql= ""
				+ "SELECT c. * "
				+ "FROM "+  CATEGORY_TABLE + " c "
				+ "JOIN " + PROJECT_CATEGORY_TABLE + " Pc USING ( category_id) "
				+  " WHERE project_id= ? ";
					//@formatter:on
			
		try(PreparedStatement stmt= conn.prepareStatement(sql)){
			setParameter(stmt,1,projectId,Integer.class);
			
			try(ResultSet rs= stmt.executeQuery()){
				List<Category> categories= new LinkedList<>();
				
				while(rs.next()) {
					categories.add(extract(rs,Category.class));
				}
				return categories;
			}
			
		}
		
		
	}

	private List<Step> fetchRecipeSteps(Connection conn, Integer recipeId) throws SQLException {
		
		String sql= "SELECT * FROM " + MATERIAL_TABLE + "  WHERE  project_id = ? ";
		
		try(PreparedStatement stmt= conn.prepareStatement(sql)){
			setParameter(stmt,1,projectId, Integer.class);
			
			try(ResultSet rs= stmt.executeQuery()){
			List<Material>materials= new LinkedList<>();
			
			while(rs.next()) {
				materials.add(extract(rs,Material.class));
			}
			return materials;
			}
		}
		
	}

	private List<Ingredient> fetchRecipeIngredients(Connection conn, Integer recipeId) throws SQLException{
		//@formatter:off
		String sql= ""
				+ "SELECT i. * , u.unit_name_singular, u.unit_name_plural "
				+ " FROM "+ INGREDIENT_TABLE +  " i "
				+ " LEFT JOIN "+ UNIT_TABLE + " u USING (unit_id) "
				+ " WHERE recipe_id = ? "
				+ " ORDER BY i.ingredient_order";
		//@formatter:on
		
		try(PreparedStatement stmt= conn.prepareStatement(sql)){
			setParameter(stmt, 1,recipeId,Integer.class);
			try(ResultSet rs= stmt.executeQuery()){
				List<Ingredient> ingredients= new LinkedList<Ingredient>();
				while(rs.next()) {
					Ingredient ingredient= extract(rs,Ingredient.class);
					Unit unit= extract(rs,Unit.class);
					
					ingredient.setUnit(unit);
					ingredients.add(ingredient);
					
				}
				return ingredients;
			}
		}
		
	}

	public void executeBatch(List<String> sqlBatch) {
		try(Connection conn = DbConnection.getConnection()){
			startTransaction(conn);
			try(Statement stmt = conn.createStatement()){
				for(String sql:sqlBatch) {
					stmt.addBatch(sql);
				}
				stmt.executeBatch();
				commitTransaction(conn);
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DbException(e);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw new DbException(e);
		}
		
	}

	public Recipe insertRecipe(Recipe recipe) {
		//@formatter:off
		String sql= ""
				+ "INSERT INTO " + RECIPE_TABLE + " " 
				+ "(recipe_name, notes, num_servings, prep_time, cook_time) "
				+ "VALUES "
				+ "(?, ?, ?, ?, ?)";
		//@formatter:on
		try(Connection conn = DbConnection.getConnection()){
			startTransaction(conn);
			try(PreparedStatement stmt= conn.prepareStatement(sql)){
				setParameter(stmt,1,  recipe.getRecipeName(),String.class);
				setParameter(stmt, 2, recipe.getNotes(),String.class);
				setParameter(stmt, 3, recipe.getNumServings(), Integer.class);
				setParameter(stmt, 4, recipe.getPrepTime(), LocalTime.class);
				setParameter(stmt, 5, recipe.getCookTime(), LocalTime.class);
				
				stmt.executeUpdate();
				Integer recipeId= getLastInsertId(conn,RECIPE_TABLE);
				
				commitTransaction(conn);
				
				recipe.setRecipeId(recipeId);
				return recipe;
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DbException(e);
			}
		} catch(SQLException e) {
			throw new DbException(e);
		}
		
		
	}

	public List<Recipe> fetchAllRecipies() {
		String sql= "SELECT * FROM "+ RECIPE_TABLE+ " ORDER BY recipe_name ";
		try (Connection conn= DbConnection.getConnection()){
			startTransaction(conn);
			try(PreparedStatement stmt= conn.prepareStatement(sql) ){
				try (ResultSet rs= stmt.executeQuery()){
					List<Recipe> recipies=new LinkedList<>();
					while (rs.next()) {
                recipies.add(extract(rs,Recipe.class));
				}
					return recipies;
			}
		}
		
		catch(Exception e) {
			rollbackTransaction(conn); 
			throw new DbException(e);
		}
		} catch(SQLException e) {
			throw new DbException(e);
			}
		
		

	}

}


*/





